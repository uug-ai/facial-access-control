basePath: /
definitions:
  models.Authentication:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Authorization:
    properties:
      code:
        type: integer
      email:
        type: string
      expire:
        type: string
      role:
        type: string
      token:
        type: string
    type: object
  models.Location:
    properties:
      address:
        type: string
      id:
        type: integer
      lat:
        type: number
      lng:
        type: number
      name:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      language:
        type: string
      lastname:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
info:
  contact:
    email: support@kerberos.io
    name: API Support
    url: https://www.kerberos.io
  description: This is the API for using and configuring Kerberos Agent.
  license:
    name: Apache 2.0 - Commons Clause
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://kerberos.io
  title: Swagger Kerberos Agent API
  version: "1.0"
paths:
  /api/locations:
    get:
      description: Get all locations
      operationId: getLocations
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Location'
            type: array
      security:
      - Bearer: []
      summary: Get all locations
      tags:
      - locations
    post:
      consumes:
      - application/json
      description: Create location
      operationId: addLocation
      parameters:
      - description: Location
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/models.Location'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Location'
      security:
      - Bearer: []
      summary: Create location
      tags:
      - locations
  /api/locations/{id}:
    delete:
      description: Delete location
      operationId: deleteLocation
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Delete location
      tags:
      - locations
    get:
      description: Get location by ID
      operationId: getLocation
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Location'
      security:
      - Bearer: []
      summary: Get location by ID
      tags:
      - locations
  /api/login:
    post:
      description: Get Authorization token.
      operationId: login
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.Authentication'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Authorization'
      summary: Get Authorization token.
      tags:
      - authentication
  /api/users:
    get:
      description: Get all users
      operationId: getUsers
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add user
      operationId: addUser
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      security:
      - Bearer: []
      summary: Add user
      tags:
      - users
  /api/users/{email}:
    get:
      description: Get user by email
      operationId: getUserByEmail
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - Bearer: []
      summary: Get user by email
      tags:
      - users
  /api/users/{id}:
    delete:
      description: Delete user
      operationId: deleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get user
      operationId: getUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - Bearer: []
      summary: Get user
      tags:
      - users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
